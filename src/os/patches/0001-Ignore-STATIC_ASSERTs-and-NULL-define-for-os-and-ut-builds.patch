--- a/MdePkg/Include/Base.h	2021-04-08 15:21:25.633319900 -0700
+++ b/MdePkg/Include/Base.h	2021-08-16 13:22:36.046890000 -0700
@@ -318,7 +318,11 @@
 ///
 /// NULL pointer (VOID *)
 ///
+#ifndef OS_BUILD
+#ifndef UNIT_TEST_UEFI_BUILD
 #define NULL  ((VOID *) 0)
+#endif
+#endif
 
 //
 // Null character
@@ -810,6 +814,8 @@
 // Section 2.3.1 of the UEFI 2.3 Specification.
 //
 
+#ifndef OS_BUILD
+#ifndef UNIT_TEST_UEFI_BUILD
 STATIC_ASSERT (sizeof (BOOLEAN) == 1, "sizeof (BOOLEAN) does not meet UEFI Specification Data Type requirements");
 STATIC_ASSERT (sizeof (INT8)    == 1, "sizeof (INT8) does not meet UEFI Specification Data Type requirements");
 STATIC_ASSERT (sizeof (UINT8)   == 1, "sizeof (UINT8) does not meet UEFI Specification Data Type requirements");
@@ -821,6 +827,8 @@
 STATIC_ASSERT (sizeof (UINT64)  == 8, "sizeof (UINT64) does not meet UEFI Specification Data Type requirements");
 STATIC_ASSERT (sizeof (CHAR8)   == 1, "sizeof (CHAR8) does not meet UEFI Specification Data Type requirements");
 STATIC_ASSERT (sizeof (CHAR16)  == 2, "sizeof (CHAR16) does not meet UEFI Specification Data Type requirements");
+#endif
+#endif
 
 //
 // The following three enum types are used to verify that the compiler
@@ -841,9 +849,13 @@
   __VerifyUint32EnumValue = 0xffffffff
 } __VERIFY_UINT32_ENUM_SIZE;
 
+#ifndef OS_BUILD
+#ifndef UNIT_TEST_UEFI_BUILD
 STATIC_ASSERT (sizeof (__VERIFY_UINT8_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
 STATIC_ASSERT (sizeof (__VERIFY_UINT16_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
 STATIC_ASSERT (sizeof (__VERIFY_UINT32_ENUM_SIZE) == 4, "Size of enum does not meet UEFI Specification Data Type requirements");
+#endif
+#endif
 
 /**
   Macro that returns a pointer to the data structure that contains a specified field of
